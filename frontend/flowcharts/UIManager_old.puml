@startuml

!define RECTANGLE rectangle
skinparam rectangle {
    BackgroundColor #F9F9F9
    BorderColor #333
}
RECTANGLE "UIManager Core" {
    UIManager --> handleResetScene
    UIManager --> handleStartAutomation
    UIManager --> handleStopAutomation
    UIManager --> handlePauseAutomation
    UIManager --> handleResumeAutomation
    UIManager --> handleResetJoints
    UIManager --> handleSetJoints
    UIManager --> handleEmergencyStop12345
    UIManager --> handleClearEmergency12345
    UIManager --> setAutomationStrategy
    UIManager --> handleLogControls
    UIManager --> updateBinCounts
    UIManager --> updateCycleCount
    UIManager --> updateAutomationStatus
    UIManager --> updateJointDisplays
    UIManager --> updateAutomationButtons
    UIManager --> updatePauseResumeButtons
    UIManager --> toggleOverrideControls
    UIManager --> showEmergencyUI
    UIManager --> hideEmergencyUI
    UIManager --> showSafetyUI
    UIManager --> hideSafetyUI
    UIManager --> toggleEmergencyResumeButtons
    UIManager --> showStatus
    UIManager --> showToast
}

RECTANGLE "Reset Scene" {
    handleResetScene --> "showStatus : Restarting scene..."
    "showStatus : Restarting scene..." --> "POST /reset -> resetData"
    "POST /reset : resetData" --> "POST /angles : current_angles = resetData.targetAngles"
    "POST /angles : current_angles = resetData.targetAngles" --> "POST /moving : is_moving = false"
    "POST /moving : is_moving = false" --> "POST /pause : is_paused = false"
    "POST /pause : is_paused = false" --> "POST /stop : is_stopped = false"
    "POST /stop : is_stopped = false" --> "POST /emergency : is_emergency = false"
    "POST /emergency : is_emergency = false" --> "POST /safety : is_emergency = false"
    "POST /safety : is_emergency = false" --> "updateJointDisplays : resetData.currentAngles"
    "updateJointDisplays : resetData.currentAngles" --> updateAutomationStatus
    updateAutomationStatus --> updateAutomationButtons
    updateAutomationButtons --> toggleOverrideControls
    toggleOverrideControls --> RobotManager.SceneManager.reset
}

' ---- Start Automation ----
RECTANGLE "Start Automation"{
    handleStartAutomation --> "showStatus : Starting automation..."
    "showStatus : Starting automation..." --> AutomationManager.BinManager.isEmpty
    AutomationManager.BinManager.isEmpty --> "isEmpty : false"
    AutomationManager.BinManager.isEmpty --> "isEmpty : true"
    "isEmpty : false" --> "POST /moving : is_moving = true"
    "POST /moving : is_moving = true" --> "AutomationManager.cycleCount = 0"
    "AutomationManager.cycleCount = 0" --> AutomationManager.automationLoop
    AutomationManager.automationLoop --> updateAutomationButtons
    updateAutomationButtons --> toggleOverrideControls
    toggleOverrideControls --> "showStatus : Automation Starting..."
    "isEmpty : true" --> "throw Error : No objects to move - reset the scene first"
}

' ---- Stop Automation ----
RECTANGLE "Stop Automation"{
    handleStopAutomation --> "showStatus : Stopping automation..."
    "showStatus : Stopping automation..." --> "POST /stop : is_stopped = true"
    "POST /stop : is_stopped = true" --> "Wait for AutomationManager.automationLoop cycle to finish"
    "Wait for AutomationManager.automationLoop cycle to finish" --> "POST /moving : is_moving = false"
    "POST /moving : is_moving = false" --> "POST /stop : is_stopped = false"
    "POST /stop : is_stopped = false" --> "log: ✅ Automation stopped"
    "log: ✅ Automation stopped" --> updateAutomationButtons
    updateAutomationButtons --> toggleOverrideControls
    toggleOverrideControls --> "showStatus : Automation Stopped"
}

' ---- Pause Automation ----
RECTANGLE "Pause Automation"{
    handlePauseAutomation --> "POST /pause : is_paused = true"
    "POST /pause : is_paused = true" --> "POST /moving : is_moving = false"
    "POST /moving : is_moving = false" --> updateAutomationStatus
    updateAutomationStatus --> updatePauseResumeButtons
    updatePauseResumeButtons --> toggleOverrideControls
    toggleOverrideControls --> "showStatus : Automation Paused"
}

' ---- Resume Automation ----
RECTANGLE "Resume Automation"{
    handleResumeAutomation --> "POST /pause : is_paused = false"
    "POST /pause : is_paused = false" --> "POST /moving : is_moving = true"
    "POST /moving : is_moving = true" --> updateAutomationStatus
    updateAutomationStatus --> toggleOverrideControls
    toggleOverrideControls --> updateAutomationButtons
    toggleOverrideControls --> updatePauseResumeButtons
    updatePauseResumeButtons --> "showStatus : Automation Resumed"
}

' ---- Reset Joints ----
RECTANGLE "Reset Joints"{
    handleResetJoints --> "showStatus : Resetting robot..."
    "showStatus : Resetting robot..." --> "POST /moving : is_moving = true"
    "POST /moving : is_moving = true" --> toggleOverrideControls
    toggleOverrideControls --> "POST /reset -> resetData"
    "POST /reset -> resetData" --> "Check if Shoulder rotation is greater than 50 degrees"
    "Check if Shoulder rotation is greater than 50 degrees" --> "YES : RobotManager.moveToSaferPosition"
    "YES : RobotManager.moveToSaferPosition" --> "NO : Update Shoulder rotation display"
    "Check if Shoulder rotation is greater than 50 degrees" --> "NO : Update Shoulder rotation display"
    "NO : Update Shoulder rotation display" --> "RobotManager.moveTo : resetData.targetAngles"
    "RobotManager.moveTo : resetData.targetAngles" --> toggleOverrideControls
    toggleOverrideControls --> "showStatus : Robot reset!"
}

' ---- Set Joints ----
RECTANGLE "Set Joints"{
    handleSetJoints --> "GET /state -> state"
    "GET /state -> state" --> state.isEmergencyMode
    state.isEmergencyMode --> "isEmergencyMode : true"
    "isEmergencyMode : true" --> "showStatus : Emergency mode is active"
    "GET /state -> state" --> state.isSafetyMode
    state.isSafetyMode --> "isSafetyMode : true"
    "isSafetyMode : true" --> "showStatus : Safety mode is active"
    "GET /state -> state" --> "POST /moving : is_moving = true"
    "POST /moving : is_moving = true" --> toggleOverrideControls
    toggleOverrideControls --> "Gather all joint input values -> jointAngles"
    "Gather all joint input values -> jointAngles" --> "showStatus : Setting joint angles..."
    "showStatus : Setting joint angles..." --> "RobotManager.moveTo : state.currentAngles, jointAngles, manualIntervention = true"
    "RobotManager.moveTo : state.currentAngles, jointAngles, manualIntervention = true" --> "showStatus : Joint angles set!"
    "showStatus : Joint angles set!" --> toggleOverrideControls
}

' ---- Update Bin Counts ----
RECTANGLE "Update Bin Counts"{
    updateBinCounts --> AutomationManager.BinManager.getBinCounts
    AutomationManager.BinManager.getBinCounts --> "Update Visuals for left bin"
    AutomationManager.BinManager.getBinCounts --> "Update Visuals for right bin"
}

' ---- Update Cycle Count ----
RECTANGLE "Update Cycle Count"{
    updateCycleCount --> AutomationManager.cycleCount
    AutomationManager.cycleCount --> "Update Visuals for cycle count"
}

' ---- Update Automation Status ----
RECTANGLE "Update Automation Status"{
    updateAutomationStatus --> "GET /state -> state"
    "GET /state -> state" --> state.isMoving
    state.isMoving --> "isMoving : true"
    "isMoving : true" --> "Update Automation Status to Moving"
    state.isMoving --> "isMoving : false"
    "isMoving : false" --> "Update Automation Status to Idle"
}

' ---- Update Joint Displays ----
RECTANGLE "Update Joint Displays"{
    updateJointDisplays --> "Receive the angles as a variable when calling the function"
    "Receive the angles as a variable when calling the function" --> "Update Visuals for angles"
}

' ---- Update Automation Buttons ----
RECTANGLE "Update Automation Buttons"{
    updateAutomationButtons --> "GET /state -> state"
    "GET /state -> state" --> state.isMoving
    state.isMoving --> "isMoving : true"
    "isMoving : true" --> "Disable Automation Start button"
    "Disable Automation Start button" --> "Enable Automation Stop button"
    "Enable Automation Stop button" --> updatePauseResumeButtons
    state.isMoving --> "isMoving : false"
    "isMoving : false" --> "Enable Automation Start button"
    "Enable Automation Start button" --> "Disable Automation Stop button"
    "Disable Automation Stop button" --> updatePauseResumeButtons
}

' ---- Update Pause Resume Buttons ----
RECTANGLE "Update Pause Resume Buttons"{
    updatePauseResumeButtons --> "GET /state -> state"
    "GET /state -> state" --> "state.isPaused and state.isMoving"
    "state.isPaused and state.isMoving" --> "isPaused : true"
    "isPaused : true" --> "Update Pause Resume Buttons to Resume"
    "state.isPaused and state.isMoving" --> "isPaused : false and isMoving : true"
    "isPaused : false and isMoving : true" --> "Update Pause Resume Buttons to Pause"
    "state.isPaused and state.isMoving" --> "isMoving : false"
    "isMoving : false" --> "Update Pause Resume Buttons to Pause but Disabled"
}

' ---- Toggle Override Controls ----
RECTANGLE "Toggle Override Controls"{
    toggleOverrideControls --> "GET /state -> state"
    "GET /state -> state" --> state.isMoving
    state.isMoving --> "isMoving : true"
    "isMoving : true" --> "Update Override Controls to Disable"
    state.isMoving --> "isMoving : false"
    "isMoving : false" --> "Update Override Controls to Enable"
}

' ---- Show Emergency UI ----
RECTANGLE "Show Emergency UI"{
    showEmergencyUI --> "GET /state -> state"
    "GET /state -> state" --> state.isEmergencyMode
    state.isEmergencyMode --> "isEmergencyMode : true"
    "isEmergencyMode : true" --> "Update UI to Show Emergency Div"
}

' ---- Hide Emergency UI ----
RECTANGLE "Hide Emergency UI"{
    hideEmergencyUI --> "Check if Emergency Div is visible"
    "Check if Emergency Div is visible" --> "YES : remove it"
}

' ---- Show Safety UI ----
RECTANGLE "Show Safety UI"{
    showSafetyUI --> "GET /state -> state"
    "GET /state -> state" --> state.isSafetyMode
    state.isSafetyMode --> "isSafetyMode : true"
    "isSafetyMode : true" --> "Update UI to Show Safety Div"
}

' ---- Hide Safety UI ----
RECTANGLE "Hide Safety UI"{
    hideSafetyUI --> "Check if Safety Div is visible"
    "Check if Safety Div is visible" --> "YES : remove it"
}

' ---- Toggle Emergency Resume Buttons ----
RECTANGLE "Toggle Emergency Resume Buttons"{
    toggleEmergencyResumeButtons --> "Receive mode when called"
    "Receive mode when called" --> Emergency
    Emergency --> "Update Emergency and Resume buttons to show Resume"
    "Receive mode when called" --> notEmergency
    notEmergency --> "Update Emergency and Resume buttons to show Emergency"
}

' ---- Show Status ----
RECTANGLE "Show Status"{
    showStatus --> "Console log the provided message"
    "Console log the provided message" --> showToast
}

' ---- Show Toast ----
RECTANGLE "Show Toast"{
    showToast --> "Display the toast notification"
}

@enduml