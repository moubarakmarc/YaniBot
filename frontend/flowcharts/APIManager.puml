@startuml
title APIManager Class - Main Interactions

actor User
participant APIManager as API
participant Backend as Backend

== Initialization ==
User -> API: new APIManager()
API -> API: set baseURL from ENV
alt baseURL missing
    API -> API: throw Error
end

User -> API: init()
API -> Backend: fetch(ROOT)
Backend --> API: response
alt response.ok
    API -> API: return true
else
    API -> API: throw Error("Backend not reachable")
end

== State Management ==
User -> API: getState()
API -> Backend: fetch(STATE)
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Backend error")
end

User -> API: reset()
API -> Backend: fetch(RESET, POST)
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: warn and return
end

== Path and Limits ==
User -> API: getInterpolatedPath(startAngles, targetAngles, steps)
API -> Backend: fetch(INTERPOLATE?steps=steps, POST, payload)
Backend --> API: response
alt response.ok
    API -> API: return data.steps
else
    API -> API: throw Error("Failed to fetch interpolated path")
end

User -> API: check_joint_limits(angles)
API -> Backend: fetch(LIMITS, POST, {joint_angles: angles})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to check joint limits")
end

== Robot State Setters ==
User -> API: setCurrentAngles(angles)
API -> Backend: fetch(ANGLES, POST, {joint_angles: angles})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to set joint angles")
end

User -> API: setMovingState(isMoving)
API -> Backend: fetch(MOVING, POST, {is_moving: isMoving})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to set moving state")
end

User -> API: setStopState(isStopped)
API -> Backend: fetch(STOP, POST, {is_stopped: isStopped})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to set stop state")
end

User -> API: setPauseState(isPaused)
API -> Backend: fetch(PAUSE, POST, {is_paused: isPaused})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to set pause state")
end

User -> API: setEmergencyState(isEmergency)
API -> Backend: fetch(EMERGENCY, POST, {is_emergency: isEmergency})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to set emergency state")
end

User -> API: setSafetyMode(isSafety)
API -> Backend: fetch(SAFETY, POST, {is_emergency: isSafety})
Backend --> API: response
alt response.ok
    API -> API: return data
else
    API -> API: throw Error("Failed to set safety mode")
end

@enduml