services:
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    image: yanibot-backend:latest
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      - UVICORN_RELOAD=true
      - BACKEND_HOST=${BACKEND_HOST:-0.0.0.0}
      - BACKEND_PORT=${BACKEND_PORT:-8000}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "${BACKEND_PROTOCOL:-http}://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - yanibot-network

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    environment:
      - BACKEND_URL=${BACKEND_PROTOCOL:-http}://backend:${BACKEND_PORT:-8000}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "${FRONTEND_PROTOCOL:-http}://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - yanibot-network

  test:
    build:
      context: .
      dockerfile: backend.Dockerfile
    image: yanibot-backend:latest
    command: ["pytest", "tests/", "-v", "--tb=short"]
    volumes:
      - ./backend:/app
    environment:
      - PYTHONPATH=/app
      - BACKEND_URL=${BACKEND_PROTOCOL:-http}://backend:${BACKEND_PORT:-8000}
      - TEST_ENV=true
    depends_on:
      - backend
    networks:
      - yanibot-network
    restart: "no"

networks:
  yanibot-network:
    driver: bridge